# Enhanced FX Thresholding Dashboard with GPR & HMM

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import Matern, WhiteKernel, ConstantKernel as C
from hmmlearn.hmm import GaussianHMM
from scipy.stats import skew, kurtosis
from arch import arch_model
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
from sklearn.metrics import silhouette_score

# --- Constants ---
ROLL_WINDOW = 60
ANNUALIZE = np.sqrt(252)
DEFAULT_PCT = 95
MANUAL_BANDS = {
    1: (0.00, 0.07, 0.07),
    2: (0.07, 0.50, 0.50),
    3: (0.50, 0.60, 0.60),
    4: (0.60, np.inf, 0.70),
}

def find_group_and_thresh(v):
    for g,(lo,hi,t) in MANUAL_BANDS.items():
        if lo<=v<hi: return g,t
    return 4,MANUAL_BANDS[4][2]

st.set_page_config(layout="wide", page_title="FX Thresholding â€“ GPR & HMM")
st.title("FX Dashboard with Advanced Thresholds")

# Data upload
fx_file = st.file_uploader("Upload FX CSV", type="csv")
if not fx_file:
    st.stop()
df = pd.read_csv(fx_file, parse_dates=["Date"])
df = df.sort_values("Date")
max_date = df["Date"].max()
cutoff = max_date - pd.Timedelta(days=7)
start = max_date - pd.Timedelta(days=365)
df_1yr = df[(df["Date"]>start)&(df["Date"]<=cutoff)]
currencies = sorted(df["Currency"].unique())

tabs = st.tabs([
    "GPR Thresholds", "HMM Thresholds", "Cross-Currency Summary"
])
tab_gpr, tab_hmm, tab_cross = tabs

# Tab: GPR Thresholds
with tab_gpr:
    st.header("Gaussian Process Regression Thresholds")
    # Rolling volatility
    roll = df_1yr.set_index("Date").groupby("Currency")["LogReturn"]            .rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std().reset_index()
    roll.rename(columns={"LogReturn":"RollVol"}, inplace=True)
    roll["RollVol"] *= ANNUALIZE
    results = []
    for ccy in currencies:
        d = roll[roll["Currency"]==ccy].dropna(subset=["RollVol"])
        if len(d)<ROLL_WINDOW: continue
        X = d["Date"].map(pd.Timestamp.toordinal).values.reshape(-1,1)
        y = d["RollVol"].values
        kernel = C(1.0, (1e-3,1e3))*Matern(30, nu=1.5) + WhiteKernel(1e-5)
        gpr = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=3)
        gpr.fit(X,y)
        Xp = np.array([[max_date.toordinal()]])
        m, s = gpr.predict(Xp, return_std=True)
        thr = float(m+2*s)
        curr = float(d["RollVol"].iloc[-1])
        results.append({"Currency":ccy,"GPR_Threshold":thr,"CurrentVol":curr})
    st.dataframe(pd.DataFrame(results))

# Tab: HMM Thresholds
with tab_hmm:
    st.header("Hidden Markov Model Thresholds")
    results = []
    for ccy in currencies:
        series = df_1yr[df_1yr["Currency"]==ccy]["LogReturn"].dropna().values.reshape(-1,1)
        if len(series)<ROLL_WINDOW: continue
        model = GaussianHMM(n_components=2, covariance_type="diag", n_iter=100)
        model.fit(series)
        cov = model.covars_.flatten()
        high = np.argmax(cov)
        thr = np.sqrt(cov[high])
        curr = float(np.sqrt(np.var(series[-ROLL_WINDOW:])))
        results.append({"Currency":ccy,"HMM_Threshold":thr,"CurrentDailyVol":curr})
    st.dataframe(pd.DataFrame(results))

# Tab: Cross-Currency Summary
with tab_cross:
    st.header("Cross-Currency Optimal Thresholds")
    codes = sorted({c[:-3] for c in currencies if c.endswith("USD")} |
                   {c[3:] for c in currencies if c.startswith("USD")})
    pairs = [a+b for i,a in enumerate(codes) for b in codes[i+1:]]
    summary = []
    for pair in pairs:
        a,b = pair[:3], pair[3:]
        leg1 = a+"USD" if a+"USD" in currencies else "USD"+a
        leg2 = b+"USD" if b+"USD" in currencies else "USD"+b
        if leg1 not in currencies or leg2 not in currencies: continue
        pivot = df_1yr.pivot(index="Date",columns="Currency",values="LogReturn")
        synth = pivot[leg1] - pivot[leg2]
        roll_s = synth.rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std()*ANNUALIZE
        valid = roll_s.dropna()
        if valid.empty: continue
        statthr = float(valid.quantile(DEFAULT_PCT/100))
        # manual from bands
        avg = df_1yr.groupby("Currency")["VolatilityOHLC"].mean()*ANNUALIZE
        manthr = float(max(avg[leg1], avg[leg2]))
        # GPR
        Xs = valid.index.map(pd.Timestamp.toordinal).values.reshape(-1,1)
        ys = valid.values
        gpr = GaussianProcessRegressor(kernel=C(1.0)*Matern(30, nu=1.5), n_restarts_optimizer=1)
        gpr.fit(Xs,ys)
        m,s = gpr.predict(np.array([[max_date.toordinal()]]), return_std=True)
        gprthr = float(m+2*s)
        # HMM on returns
        ret = synth.dropna().values.reshape(-1,1)
        hh = GaussianHMM(n_components=2,covariance_type="diag",n_iter=50).fit(ret)
        covs = hh.covars_.flatten()
        hmmthr = float(np.sqrt(max(covs)))
        summary.append({
            "Pair":pair,"ManualThr":manthr,"StatThr":stathr,
            "GPRThr":gprthr,"HMMThr":hmmthr,"CurrentVol":float(valid.iloc[-1])
        })
    st.dataframe(pd.DataFrame(summary))