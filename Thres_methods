import numpy as np
from arch import arch_model
from scipy.stats import genpareto
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM

# Optional: import tuning routines
from hyperparameter_tuning import tune_garch, tune_isolation_forest, tune_one_class_svm

def rolling_threshold(df, window=60, perc_up=0.95, perc_lo=0.05):
    up = df['VolatilityOHLC'].rolling(window).quantile(perc_up)
    lo = df['VolatilityOHLC'].rolling(window).quantile(perc_lo)
    return up, lo

def garch_evt_threshold(df, perc_up=0.95, perc_lo=0.05, p=1, q=1):
    # p,q can be replaced by tune_garch(df)
    returns = df['VolatilityOHLC'].pct_change().dropna()*100
    am = arch_model(returns, vol='Garch', p=p, q=q)
    res = am.fit(disp='off')
    cond_vol = res.conditional_volatility
    resid = returns / cond_vol
    params = genpareto.fit(resid[resid > resid.quantile(perc_up)])
    up = genpareto.ppf(perc_up, *params) * cond_vol.mean()
    lo = resid.quantile(perc_lo) * cond_vol.mean()
    return up, lo

def isolation_forest_threshold(df, cont=0.03, n_est=100):
    # cont,n_est can come from tune_isolation_forest(df)
    model = IsolationForest(contamination=cont, n_estimators=n_est, random_state=42)
    y = model.fit_predict(df[['VolatilityOHLC']])
    lo = df['VolatilityOHLC'][y == -1].min()
    up = df['VolatilityOHLC'][y == 1].max()
    return up, lo

def one_class_svm_threshold(df, nu=0.05, gamma='scale'):
    # nu,gamma can come from tune_one_class_svm(df)
    model = OneClassSVM(nu=nu, kernel='rbf', gamma=gamma)
    model.fit(df[['VolatilityOHLC']])
    preds = model.predict(df[['VolatilityOHLC']])
    lo = df['VolatilityOHLC'][preds == -1].min()
    up = df['VolatilityOHLC'][preds == 1].max()
    return up, lo

def regime_change_threshold(df, window=30):
    m = df['VolatilityOHLC'].rolling(window).mean()
    s = df['VolatilityOHLC'].rolling(window).std()
    up, lo = m + 2*s, m - 2*s
    return up, lo
