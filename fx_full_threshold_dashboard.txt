import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM
from sklearn.metrics import silhouette_score
from arch import arch_model
from scipy.stats import skew, kurtosis
from statsmodels.tsa.stattools import acf

# --- Constants ---
ROLL_WINDOW = 60
ANNUALIZE = np.sqrt(252)
DEFAULT_PERCENTILE = 95
MANUAL_BANDS = {
    1: (0.00, 0.07, 0.07),
    2: (0.07, 0.50, 0.50),
    3: (0.50, 0.60, 0.60),
    4: (0.60, np.inf, 0.70),
}

# --- Helper Functions ---
def enforce_columns(df, cols):
    missing = [c for c in cols if c not in df.columns]
    if missing:
        st.error(f"Missing columns: {missing}")
        st.stop()

def find_group_and_thresh(vol):
    for g, (lo, hi, t) in MANUAL_BANDS.items():
        if lo <= vol < hi:
            return g, t
    return 4, MANUAL_BANDS[4][2]

# --- App Setup ---
st.set_page_config(layout="wide", page_title="FX Thresholding Dashboard")
st.title("FX Thresholding Dashboard â€“ Rich Visuals & Tuning")

# --- Data Upload ---
fx_file = st.file_uploader("Upload FX CSV (Date, Currency, LogReturn, VolatilityOHLC)", type="csv")
if not fx_file:
    st.info("Please upload your FX dataset.")
    st.stop()

df = pd.read_csv(fx_file, parse_dates=["Date"])
enforce_columns(df, ["Date", "Currency", "LogReturn", "VolatilityOHLC"])
df = df.sort_values("Date").reset_index(drop=True)
cutoff = df["Date"].max() - pd.Timedelta(days=7)
df_hist = df[df["Date"] <= cutoff]
currencies = sorted(df["Currency"].unique())

# --- Tabs ---
tabs = st.tabs([
    "1. Summary & Thresholds",
    "2. Manual vs Statistical",
    "3. GARCH Forecast",
    "4. ML Anomaly Detection",
    "5. Regime Detection",
    "6. Model Tuning & Metrics",
    "7. Cross-Pair Thresholds"
])
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = tabs

# --- Tab 1: Summary & Thresholds ---
with tab1:
    st.subheader("1. Rolling Volatility & Statistical Threshold")
    pct = st.slider("Select percentile", 90, 99, DEFAULT_PERCENTILE)
    # Compute rolling vol
    roll = (df_hist.set_index("Date")
               .groupby("Currency")["LogReturn"]
               .rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std()
               .reset_index())
    roll.rename(columns={"LogReturn":"RollVol"}, inplace=True)
    roll["RollVol"] *= ANNUALIZE
    # Thresholds and latest
    thresh = (roll.groupby("Currency")["RollVol"]
                 .quantile(pct/100).reset_index(name="Threshold"))
    latest = (roll.groupby("Currency")
                  .apply(lambda x: x.sort_values("Date")["RollVol"].dropna().iloc[-1])
                  .reset_index(name="LatestVol"))
    df_sum = thresh.merge(latest, on="Currency")
    df_sum["Flag"] = df_sum["LatestVol"] > df_sum["Threshold"]
    st.dataframe(df_sum.round(4), use_container_width=True)
    # Time-series example
    sample_ccy = st.selectbox("Pick a currency to visualize", currencies)
    d = roll[roll["Currency"] == sample_ccy].set_index("Date")
    fig = px.line(d, y="RollVol", title=f"{sample_ccy} Rolling Volatility")
    fig.add_hline(y=df_sum.loc[df_sum["Currency"]==sample_ccy,"Threshold"].values[0],
                  line_dash="dash", annotation_text="Threshold")
    st.plotly_chart(fig, use_container_width=True)

# --- Tab 2: Manual vs Statistical ---
with tab2:
    st.subheader("2. Manual vs Statistical Thresholds")
    # Manual
    avg_vol = df_hist.groupby("Currency")["VolatilityOHLC"].mean() * ANNUALIZE
    df_base = avg_vol.reset_index(name="AvgAnnVol")
    grp = df_base["AvgAnnVol"].apply(find_group_and_thresh).tolist()
    df_base[["ManualGroup","ManualThresh"]] = pd.DataFrame(grp, index=df_base.index)
    # Statistical
    stat = (roll.groupby("Currency")["RollVol"].quantile(0.95)
                .reset_index(name="StatThresh"))
    curr = latest.rename(columns={"LatestVol":"CurrVol"})
    df_merge = df_base.merge(stat, on="Currency").merge(curr, on="Currency")
    df_merge["Flag_Manual"] = df_merge["CurrVol"] > df_merge["ManualThresh"]
    df_merge["Flag_Stat"]   = df_merge["CurrVol"] > df_merge["StatThresh"]
    st.dataframe(df_merge.round(4), use_container_width=True)
    # Distribution chart
    fig2 = px.histogram(roll, x="RollVol", nbins=50, facet_col="Currency",
                        title="Volatility Distribution by Currency")
    st.plotly_chart(fig2, use_container_width=True)

# --- Tab 3: GARCH Forecast ---
with tab3:
    st.subheader("3. GARCH(1,1) Forecast vs Realized Vol")
    sample_ccy = st.selectbox("Currency for GARCH", currencies, key="garch_ccy")
    s = df_hist[df_hist["Currency"]==sample_ccy]["LogReturn"].dropna()
    if len(s)>=ROLL_WINDOW:
        m = arch_model(s, vol="Garch", p=1, q=1).fit(disp="off")
        fcast = np.sqrt(m.forecast(horizon=1).variance.values[-1][0]) * ANNUALIZE
        df_ts = pd.DataFrame({
            "Date": s.index,
            "Realized": s.rolling(ROLL_WINDOW).std()*ANNUALIZE,
            "Forecast": [np.nan]*(len(s)-1) + [fcast]
        }).reset_index(drop=True)
        fig3 = px.line(df_ts, x="Date", y=["Realized","Forecast"],
                       title=f"{sample_ccy} Realized vs Forecast")
        st.plotly_chart(fig3, use_container_width=True)
    else:
        st.warning("Not enough history for GARCH on this currency.")

# --- Tab 4: ML Anomaly Detection ---
with tab4:
    st.subheader("4. ML Anomaly Detection with Tuning Sliders")
    cont = st.select_slider("IsolationForest contamination", [0.01,0.03,0.05,0.1], value=0.05)
    nu  = st.select_slider("OneClassSVM nu", [0.01,0.03,0.05,0.1], value=0.05)
    feat = df_hist.groupby("Currency")["LogReturn"].agg([
        ("Vol", lambda x: x.std()*ANNUALIZE),
        ("Skew", skew),
        ("Kurt", kurtosis)
    ]).dropna()
    if len(feat)>=2:
        X = feat[["Vol","Skew","Kurt"]]
        if_m = IsolationForest(contamination=cont, random_state=42).fit(X)
        oc_s = OneClassSVM(nu=nu).fit(X)
        feat["Flag_IF"]    = if_m.predict(X)==-1
        feat["Flag_OCSVM"] = oc_s.predict(X)==-1
        sil_if = silhouette_score(X, if_m.predict(X)==-1)
        sil_oc = silhouette_score(X, oc_s.predict(X)==-1)
        st.write(f"IsolationForest silhouette: {sil_if:.3f}")
        st.write(f"OneClassSVM silhouette: {sil_oc:.3f}")
        fig4 = px.bar(x=["IF","OCSVM"], y=[sil_if,sil_oc],
                      title="Silhouette Scores")
        st.plotly_chart(fig4, use_container_width=True)
    st.dataframe(feat.round(4), use_container_width=True)

# --- Tab 5: Regime Detection ---
with tab5:
    st.subheader("5. Regime Shift Detection")
    df["RollVol"] = df.groupby("Currency")["LogReturn"].transform(
        lambda x: x.rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std()*ANNUALIZE
    )
    df["ZScore"] = df.groupby("Currency")["RollVol"].transform(
        lambda x: (x - x.mean())/x.std()
    )
    sample_ccy = st.selectbox("Currency for Regime", currencies, key="regime_ccy")
    d_reg = df[df["Currency"]==sample_ccy].set_index("Date")
    fig5 = px.line(d_reg, y="ZScore", title=f"{sample_ccy} Z-Score of Vol")
    fig5.add_hrect(y0=2, y1=d_reg["ZScore"].max(), fillcolor="red", opacity=0.2)
    fig5.add_hrect(y0=d_reg["ZScore"].min(), y1=-2, fillcolor="red", opacity=0.2)
    st.plotly_chart(fig5, use_container_width=True)

# --- Tab 6: Model Tuning & Metrics ---
with tab6:
    st.subheader("6. Hyperparameter Tuning Results")
    cont_vals = [0.01,0.03,0.05,0.1]
    nu_vals   = [0.01,0.03,0.05,0.1]
    feat = df_hist.groupby("Currency")["LogReturn"].agg([
        ("Vol", lambda x: x.std()*ANNUALIZE),
        ("Skew", skew),
        ("Kurt", kurtosis)
    ]).dropna()
    X = feat[["Vol","Skew","Kurt"]]
    results = []
    for c in cont_vals:
        sil = silhouette_score(X, IsolationForest(contamination=c, random_state=42).fit_predict(X)==-1)
        results.append({"Model":"IF", "Param":c, "Silhouette":sil})
    for n in nu_vals:
        sil = silhouette_score(X, OneClassSVM(nu=n).fit_predict(X)==-1)
        results.append({"Model":"OCSVM", "Param":n, "Silhouette":sil})
    df_tune = pd.DataFrame(results)
    st.dataframe(df_tune, use_container_width=True)
    fig6 = px.bar(df_tune, x="Param", y="Silhouette", color="Model",
                  barmode="group", title="Tuning Silhouette Scores")
    st.plotly_chart(fig6, use_container_width=True)

# --- Tab 7: Cross-Pair Thresholds ---
with tab7:
    st.subheader("7. Cross-Pair Thresholds")
    codes = sorted({c[:-3] for c in currencies if c.endswith("USD")} |
                   {c[3:] for c in currencies if c.startswith("USD")})
    cross_pairs = [a+b for i,a in enumerate(codes) for b in codes[i+1:]]
    selected = st.selectbox("Select Cross Pair", cross_pairs)
    a, b = selected[:3], selected[3:]
    leg1 = (a+"USD") if (a+"USD") in currencies else ("USD"+a)
    leg2 = (b+"USD") if (b+"USD") in currencies else ("USD"+b)
    if leg1 in currencies and leg2 in currencies:
        df_c = df_hist.pivot(index="Date", columns="Currency", values="LogReturn")
        synth = df_c[leg1] - df_c[leg2]
        roll_cp = synth.rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std() * ANNUALIZE
        valid = roll_cp.dropna()
        if valid.empty:
            st.warning("Not enough history for this pair.")
        else:
            st.markdown(f"**Synthetic Vol**: {valid.iloc[-1]:.4f}")
            st.markdown(f"**StatThreshold**: {valid.quantile(0.95):.4f}")
            man1 = df_base.loc[df_base['Currency']==leg1,'ManualThresh'].iat[0]
            man2 = df_base.loc[df_base['Currency']==leg2,'ManualThresh'].iat[0]
            man_thr = max(man1, man2)
            st.markdown(f"**ManualThreshold**: {man_thr:.4f}")
            st.markdown(f"**FlagStat**: {valid.iloc[-1] > valid.quantile(0.95)}")
            st.markdown(f"**FlagMan**: {valid.iloc[-1] > man_thr}")
    else:
        st.warning("Pair legs not in dataset.")
